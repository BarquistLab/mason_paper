is_mm <- x %in% sig_mm$trans_id
is_term_mm <- NA
if (is_mm) {
is_term_mm <- sum(sig_mm[sig_mm$trans_id==x,][["term_mm"]])>0
}
is_mm & is_term_mm
})
})
all_sigs <- unlist(all_sigs)
# find nr of sign. downreg. genes (k):
k <- length(unlist(sapply(names(res_acpP_mutants), function(x){
sig <- rownames(res_acpP_mutants[[x]]$table[ res_acpP_mutants[[x]]$table$logFC < (-1) &
res_acpP_mutants[[x]]$table$FDR < 0.001,])
})))
q <- sum(all_sigs) # all sign. depleted genes without central mismatches
m <- sum(startot_acpp$term_mm) # all genes with up to 2 mismatches not in centre
n <- dim(res_acpP_mutants$acpP_vs_ctrl$table)[1]*length((res_acpP_mutants)) - m # all genes with central mismatches
pval <- phyper(q,m,n,k, lower.tail = F)
print(paste0("P-value: " , pval))
mutants_logchange <- sapply(res_acpP_mutants, function(x) x$table["SL1344_1133",]$logFC)
mutants_pvals <- sapply(res_acpP_mutants, function(x) x$table["SL1344_1133",]$FDR)
gdata <- data.frame(mutants_logchange, sign = ifelse(mutants_pvals < 0.01 & abs(mutants_logchange) > 1, "*", ""))
gdata$names <- gsub("_vs_ctrl", "" , rownames(gdata))
gdata$names <- factor(gdata$names, levels=c("acpP_scrambled", "acpP", "acpP_PNA_mut_1",
"acpP_PNA_mut_2", "acpP_PNA_mut_3","acpP_PNA_mut_4",
"acpP_PNA_mut_5","acpP_PNA_mut_6","acpP_PNA_mut_7",
"acpP_PNA_mut_8","acpP_PNA_mut_9"))
gdata$names <- gdata$names
gdata$Gene <- "acpP"
g_mismatches <- gdata %>% ggplot(aes(x=names, y=-mutants_logchange)) + geom_bar(stat='identity', fill="steelblue") +
geom_text(aes(label=sign), vjust=-0.3, size=5)+ theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") + ylab("-log2 fold change") +
geom_hline(yintercept=0, color="lightgrey") +
ggtitle(label = expression(paste("Mismatch PNAs' effect on ",italic("acpP"))))
svg("../analysis/mismatch_plot.svg")
print(g_mismatches)
dev.off()
g_mismatches
# add predicted melting temps:
gdata$Tm_predicted <- c(58.6, 15.7, 48.5, 36.3, 30.4, 32.6, 30.7, 28.5, 26.3, 41.5, 46.3)
gdata$shortnames <- gsub("acpP_PNA_mut_", "mm", gdata$names)
gdata$shortnames <- gsub("acpP_scrambled", "scr", gdata$shortnames)
g_melting <- gdata %>% ggplot(aes(x=Tm_predicted, y=-mutants_logchange, label = shortnames)) +
geom_point() +stat_cor(method="pearson", )+
theme_minimal() + geom_smooth(method=lm, se=FALSE, color="black") + geom_text_repel(min.segment.length = 0)+
theme(axis.line = element_line(size = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
) +
xlim(c(15,60)) + ylim(0, 2.5) +
labs(x="predicted Tm (Â°C)", y="acpP mRNA -log2 fold change")
g_melting
svg("../analysis/melting_plot.svg")
print(g_melting)
dev.off()
mutants_logchange <- sapply(res_acpP_mutants, function(x) x$table["SL1344_1134",]$logFC)
mutants_pvals <- sapply(res_acpP_mutants, function(x) x$table["SL1344_1134",]$FDR)
gdata_fabf <- data.frame(mutants_logchange, sign = ifelse(mutants_pvals < 0.01 & abs(mutants_logchange) > 1, "*", ""))
gdata_fabf$names <- gsub("_vs_ctrl", "" , rownames(gdata_fabf))
gdata_fabf$names <- factor(gdata_fabf$names, levels=c("acpP_scrambled", "acpP", "acpP_PNA_mut_1",
"acpP_PNA_mut_2", "acpP_PNA_mut_3","acpP_PNA_mut_4",
"acpP_PNA_mut_5","acpP_PNA_mut_6","acpP_PNA_mut_7",
"acpP_PNA_mut_8","acpP_PNA_mut_9"))
gdata_fabf$names <- gdata_fabf$names
gdata_fabf$Gene <- "fabF"
g_mismatches <- gdata_fabf %>% ggplot(aes(x=names, y=-mutants_logchange)) + geom_bar(stat='identity', fill="steelblue") +
geom_text(aes(label=sign), vjust=-0.3, size=5)+ theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") + ylab("-log2 fold change") +
geom_hline(yintercept=0, color="lightgrey") +
ggtitle(label = expression(paste("Mismatch PNAs' effect on ",italic("fabF"))))
svg("../analysis/mismatch_plot_fabF.svg")
print(g_mismatches)
dev.off()
gd_all <- rbind(gdata[,c(1:4)], gdata_fabf)
g_mismatches_acpp_fabf <- gd_all %>% ggplot(aes(x=names, y=-mutants_logchange, fill=Gene)) +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab("log2 fold downregulation") +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") + scale_fill_manual(values=c('steelblue','lightblue'))+
ggtitle(label = expression(paste("Effect of 2-bp mismatch PNAs on ",italic("acpP"), " and ", italic("fabF"), " expression")))
svg("../analysis/mismatch_plot_acpP_fabF.svg", width = 10)
print(g_mismatches_acpp_fabf)
dev.off()
g_mismatches_acpp_fabf
mutants_logchange <- data.frame(sapply(res_acpP_mutants, function(x) x$table$logFC),
row.names = rownames(res_acpP_mutants$acpP_vs_ctrl$table),
genenames = prefname)
mutants_pvals <- data.frame(sapply(res_acpP_mutants, function(x) x$table$FDR),
row.names = rownames(res_acpP_mutants$acpP_vs_ctrl$table),
genenames = prefname)
mutants_logchange <- mutants_logchange[order(mutants_pvals$acpP_vs_ctrl),]
mutants_pvals <- mutants_pvals[order(mutants_pvals$acpP_vs_ctrl),]
#generate data for upset plots:
list_topup_per_cond <- lapply(names(mutants_pvals)[-12], function(x) {
degenes <- mutants_pvals[rownames(mutants_logchange)[mutants_logchange[[x]]<(-1) & mutants_pvals[[x]] < 0.001],]
degenes <- rownames(degenes[order(degenes[[x]]),])
x <- degenes[1:15]
x[!is.na(x)]
})
names(list_topup_per_cond) <- names(mutants_pvals)[-12]
topdegenes <- c()
for (i in names(mutants_logchange[-12])) {
degenes <- mutants_pvals[rownames(mutants_logchange)[abs(mutants_logchange[[i]])>1 & mutants_pvals[[i]] < 0.001],]
degenes <- rownames(degenes[order(degenes[[i]]),])
topdegenes <- unique(append(topdegenes, degenes[1:10]))
}
topdegenes <- topdegenes[!is.na(topdegenes)]
#topdegenes <- unique(c(unlist(lapply(res_acpP_mutants, function(x) c(rownames(topTags(x, n=5)), rownames(topTags(x, n=5, sort.by = "logFC")))))))
mutants_logchange <- mutants_logchange[topdegenes,]
mutants_pvals <- mutants_pvals[topdegenes,]
rownames(mutants_logchange) <- ifelse(mutants_logchange$genenames == "", rownames(mutants_logchange),
mutants_logchange$genenames)
rownames(mutants_pvals) <- rownames(mutants_logchange)
mutants_logchange <- mutants_logchange[order(mutants_logchange$acpP_vs_ctrl, decreasing = T),][-12]
mutants_pvals <- mutants_pvals[rownames(mutants_logchange),][-12]
mutants_logchange <- mutants_logchange[,c(2,1,3:11)]
mutants_pvals <- mutants_pvals[,c(2,1,3:11)]
diff_exp <- sapply(names(mutants_pvals), function(x) {
tf <- mutants_pvals[[x]] < 0.001 & abs(mutants_logchange[[x]])>1
ifelse(tf, "*", " ")
})
colnames(mutants_logchange) <- c("acpPscr", "acpP", "mm1", "mm2", "mm3", "mm4", "mm5", "mm6", "mm7", "mm8", "mm9")
c1 =  circlize::colorRamp2(c(-2, 0, 2), c("steelblue", "white", "darkorange"))
ht4 <- Heatmap(t(mutants_logchange), name = "Log2 FC",
col = c1,
cluster_rows = F, cluster_columns = F, show_heatmap_legend = F,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1s", t(diff_exp)[i, j]), x, y)
},
border = TRUE,
width = unit(40, "cm"), height = unit(10, "cm"),
#row_names_max_width = max_text_width(c(0,0),gp = gpar(fontsize = 0)),
column_names_rot = 45)
lgd2 = Legend(col_fun = c1, title = expression("Log"[2]*" FC"), labels_gp = gpar(fontsize = 10),
title_gp = gpar(fontsize = 15),grid_width =  unit(0.8, "cm"),
at = c(-2, 0, 2), legend_width = unit(4, "cm"),
labels = c("-2", "  0", "  2"), legend_height = unit(3, "cm"),
title_position = "topcenter", direction = "horizontal")
svg("../analysis/heatmap_rnaseq_mutagens.svg", height = 15, width = 20)
print(ht4)
draw(lgd2, x = unit(25, "cm"), y = unit(28, "cm"), just = c("center", "top"))
dev.off()
m <- make_comb_mat(list_topup_per_cond[!is.na(list_topup_per_cond)])
UpSet(m[comb_size(m) >= 1])
library(KEGGREST)
# get link and list to get kegg info:
link_kegg <- keggLink("pathway", "sey")
list_kegg <- keggList("pathway", "sey")
kegg_pw_ids <- names(list_kegg)
#rename genes, remove ones which arent in our data:
names(link_kegg) <- gsub("sey:(.*)", "\\1", names(link_kegg)) #rename genes as locus tags
link_kegg <- link_kegg[names(link_kegg) %in% c(rownames(res_acpP_mutants$acpP_vs_ctrl$table))] #remove genes not in data
idx_kegg <- sapply(kegg_pw_ids, function(x){
x <- unique(names(link_kegg[link_kegg == x])) # choose all genes, except duplucates
})
# add phopq pw to kegg
ppq_raw <- read.delim("../data/PHOPQ.tsv", header = T)
for (c in colnames(ppq_raw)) {
gs <- ppq_raw[[c]][ppq_raw[[c]]!=""]
gs_lt <- pnames[pnames$V1 %in% gs,]$V2
idx_kegg[[c]] <- gs_lt[gs_lt %in% rownames(y$counts)]
}
l <- length(colnames(con_acpP_mutants))
acpp_kegg_fry <- lapply(1:l, function(x) fry(y,idx_kegg, design, con_acpP_mutants[,x]))
names(acpp_kegg_fry) <- colnames(con_acpP_mutants)
for (fryres in names(acpp_kegg_fry)) {
acpp_kegg_fry[[fryres]][["TERM"]] <- ifelse(grepl("path",rownames(acpp_kegg_fry[[fryres]])),
list_kegg[rownames(acpp_kegg_fry[[fryres]])],
rownames(acpp_kegg_fry[[fryres]]))
acpp_kegg_fry[[fryres]][["TERM"]] <- gsub("(.*) - Salmonella enterica subsp. enterica serovar Typhimurium SL1344",
"\\1", acpp_kegg_fry[[fryres]][["TERM"]])
write.csv(acpp_kegg_fry[[fryres]], paste("../analysis/pathway_analysis/", fryres, ".csv", sep = ""))
}
acpp_kegg_frysig <- lapply(acpp_kegg_fry, function(x) x[x[["FDR"]]<0.001 & x[["NGenes"]]>10,])
kegg_siggos <- c()
for (i in names(acpp_kegg_frysig)) {
print(i)
print(dim(acpp_kegg_frysig[[i]]))
print(acpp_kegg_frysig[[i]][,c(1,2,4,7)])
kegg_siggos <- c(kegg_siggos, rownames(acpp_kegg_frysig[[i]][1:10,]))  # can be modified
}
kegg_siggos <- unique(kegg_siggos[!grepl("NA", kegg_siggos)])
y <- DGEList(non_ess_gwc[,-1], group = non_ess_test, genes = non_ess_gwc[,1,drop=FALSE])
options(digits = 3)
head(y$samples)
L <- min(y$samples$lib.size) / 1000000
cutoff <- 10/L
keep <- rowSums(cpm(y) > cutoff) >= 5
table(keep)
y <- y[keep, , keep.lib.sizes=FALSE]
design <- model.matrix(~0+non_ess_test)
colnames(design) <- c(levels(non_ess_test))
rownames(design) <- colnames(y$counts)
design[1:5,]
y <- calcNormFactors(y)
y <- estimateDisp(y, design, robust = T)
mycolors <- c(#"chocolate4","#1F78B4","cyan4","#33A02C","deepskyblue4", "#E31A1C","deeppink3",
"black","#FF7F00","bisque4","#6A3D9A","coral4")
plotPCA(cpm(y), col=mycolors[non_ess_test])
plotRLE(cpm(y), outline=FALSE, ylim=c(-1, 1), col=mycolors[non_ess_test],
main="RLE", las=2)
logCPM_no_batch <- cpm(y, log = TRUE, prior.count = 2)
logCPM_no_batch <- logCPM_no_batch[,!grepl("99",colnames(logCPM_no_batch))]
t <- factor(as.character(non_ess_test[!grepl("rpl32", non_ess_test)]))
short_names <- c("ctrl_B1", "ompC_B2", "penta_B2", "ddlB_B2", "ctrl_B2",
"ctrl_B2", "ompC_B3", "penta_B3", "ddlB_B3", "ctrl_B3",
"ackA_B4", "ctrl_B4", "ackA_B5", "ctrl_B5")
colnames(logCPM_no_batch) <- short_names
# MDS plot:
plotMDS(logCPM_no_batch, col=mycolors[t], top = 1000)
# PCA:
pca <- prcomp(t(logCPM_no_batch))
df_pca <- as.data.frame(pca$x)
theme<-theme(panel.background = element_blank(),panel.border=element_rect(fill=NA),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
strip.background=element_blank(),
axis.text=element_text(colour="black", size=12),axis.ticks=element_line(colour="black"),
axis.title=element_text(colour="black", size=13),
plot.margin=unit(c(1,1,1,1),"line"),legend.position = "none")
percentage <- round(pca$sdev / sum(pca$sdev) * 100, 2)
percentage <- paste( colnames(df_pca), "(", paste( as.character(percentage), "%", ")", sep="") )
df_pca$group <-t
p<-ggplot(df_pca,aes(x=PC1,y=PC2,group=group,label=short_names, colour=group))
p<-p+geom_point(size=3)+ scale_shape_identity()+
geom_text_repel(size=4, min.segment.length = 0, seed = 42, box.padding = 0.5, max.overlaps = 20)+
theme + xlab(percentage[1]) + ylab(percentage[2])+ scale_color_manual(values = mycolors)
p
# save em as svgs
svg("../analysis/PCA_non_ess_test.svg")
print(p)
dev.off()
svg("../analysis/RLE_non_ess_test.svg")
plotRLE(cpm(y), outline=FALSE, ylim=c(-1, 1), col=mycolors[non_ess_test],
main="RLE", las=2)
dev.off()
con_mismatch_pnas <- makeContrasts(KFF_ackA_vs_ctrl = KFF_ackA - control,
KFF_ddlB_vs_ctrl = KFF_ddlB - control,
KFF_ompC_vs_ctrl = KFF_ompC - control,
KFF_penta_vs_ctrl = KFF_penta - control,
KFF_rpl32_vs_ctrl = KFF_rpl32 - control,
levels = design)
fit <- glmQLFit(y, design, robust = TRUE)
res_mismatch_pnas <- list(KFF_ackA_vs_ctrl = glmQLFTest(fit, contrast = con_mismatch_pnas[,1]),
KFF_ddlB_vs_ctrl = glmQLFTest(fit, contrast = con_mismatch_pnas[,2]),
KFF_ompC_vs_ctrl = glmQLFTest(fit, contrast = con_mismatch_pnas[,3]),
KFF_penta_vs_ctrl = glmQLFTest(fit, contrast = con_mismatch_pnas[,4]),
KFF_rpl32_vs_ctrl = glmQLFTest(fit, contrast = con_mismatch_pnas[,5]))
plotMD(y, main = "MD-plot")
abline(h=0, col="red", lty=2, lwd=2)
plotBCV(y)
plotQLDisp(fit)
list_ot_0 <- list()
list_ot_1 <- list()
list_ot_2 <- list()
list_plots <- list()
for (resname in names(res_mismatch_pnas)){
# adjust p-values FDR
res_mismatch_pnas[[resname]]$table$FDR <- p.adjust(res_mismatch_pnas[[resname]]$table$PValue, method = "fdr")
restab <- res_mismatch_pnas[[resname]]$table
#add genenames (not locustags)
prefname <- ifelse(rownames(restab) %in% pnames$V2 ,pnames[rownames(restab),]$V1, "" )
prefname <- ifelse(isUnique(prefname), prefname, "")
rownames(restab) <- ifelse(prefname != "", prefname, rownames(restab))
restab$genes <- rownames(restab)
hist(restab$PValue, breaks=100, main=resname)
# check for off-targets (with 0 mismatches):
targetgene <- gsub("KFF_(.*)_vs_ctrl", "\\1" , resname)
offt_zero_mm <- startot %>% filter(grepl(targetgene, probe_id) & num_mismatch==0) %>%
select(gene_name) %>% unlist
list_ot_0[[targetgene]] <- offt_zero_mm
offt_one_mm <- startot %>% filter(grepl(targetgene, probe_id) & num_mismatch==1) %>%
select(gene_name) %>% unlist
list_ot_1[[targetgene]] <- offt_one_mm
offt_two_mm <- startot %>% filter(grepl(targetgene, probe_id) & num_mismatch==2) %>%
select(gene_name) %>% unlist
list_ot_2[[targetgene]] <- offt_two_mm
off_targets <- list(zero = offt_zero_mm, one = offt_one_mm, two = offt_two_mm)
tgene_lt <- gsub(".*(ECP_.+)", "\\1", startot[grepl(targetgene, startot$probe_id),4][1])
# make volcanos:
list_plots[[targetgene]] <- do_volcano(restab, targetgene = offt_zero_mm, title=targetgene, show_sig = F,
x_limit = 6,
y_limit = 23,
alpha=0.001, pointsize = 2)
svg(paste0("../analysis/volcanoplots_bc/",resname, ".svg"))
print(do_volcano(restab, targetgene = offt_zero_mm, title=targetgene, show_sig = F,
x_limit = 6,
y_limit = 23,
alpha=0.001, pointsize = 2))
dev.off()
#pdf(paste0("../analysis/volcanoplots_bc/",resname, ".pdf"))
#print(do_volcano(restab, NULL, title=resname, show_sig = T,
#                 x_limit = 6, phopq = phopqvolc,
#                 y_limit = 23,
#                 alpha=0.001, pointsize = 3,
#                 off_target_list = off_targets))
#dev.off()
# check offt with mm in outer reg:
# check for off-targets (with 0 mismatches):
targetgene <- gsub("_vs_ctrl", "" , resname)
offt_zero_mm <- startot %>% filter(grepl(paste(targetgene, "$", sep = ""), probe_id) & num_mismatch==0) %>%
select(gene_name) %>% unlist
list_ot_0[[targetgene]] <- offt_zero_mm
offt_one_mm <- startot %>% filter(grepl(paste(targetgene, "$", sep = ""), probe_id) & num_mismatch==1 &
longest_stretch > 6) %>%
select(gene_name) %>% unlist
list_ot_1[[targetgene]] <- offt_one_mm
offt_two_mm <- startot %>% filter(grepl(paste(targetgene, "$", sep = ""), probe_id) & num_mismatch==2 &
longest_stretch > 6) %>%
select(gene_name) %>% unlist
list_ot_2[[targetgene]] <- offt_two_mm
off_targets <- list(zero = offt_zero_mm, one = offt_one_mm, two = offt_two_mm)
tgene_lt <- gsub(".*(ECP_.+)", "\\1", startot[grepl(targetgene, startot$probe_id),4][1])
# make volcanos:
#svg(paste0("../analysis/volcanoplots_bc/",resname, "_ends.svg"))
#print(do_volcano(restab, targetgene = c("acpP","fabF"), title=resname,
#                 x_limit = 6, show_sig = T, phopq = phopqvolc,
#                 y_limit = 23,
#                 alpha=0.001, pointsize = 3,
#                 off_target_list = off_targets))
#dev.off()
#pdf(paste0("../analysis/volcanoplots_bc/",resname, "_ends.pdf"))
#print(do_volcano(restab, targetgene = c("acpP","fabF"), title=resname,
#                 x_limit = 6, show_sig = T, phopq = phopqvolc,
#                 y_limit = 23,
#                 alpha=0.001, pointsize = 3,
#                 off_target_list = off_targets))
# dev.off()
#pval distributions:
hist(restab$PValue, breaks=100, main=resname)
#save result_table:
dataname <- paste("../analysis/diff_exp_rawdata/", resname, ".csv", sep = "")
write.csv(restab[order(restab$FDR),], dataname)
}
svg("../analysis/figures/volcanos.svg", width = 10, height = 10)
ggarrange(list_plots$ompC, list_plots$ackA, list_plots$ddlB, list_plots$penta)
dev.off()
DEgenes <- sapply(res_mismatch_pnas, function (x) rownames(x$table[x$table$FDR < 0.01 & abs(x$table$logFC)>1,]))
overlapping <- Reduce(intersect, DEgenes)
#prefname <- ifelse(overlapping %in% pnames$V2 ,pnames[overlapping,]$V1, "" )
#prefname <- ifelse(isUnique(prefname), prefname, "")
overlapping <- ifelse(prefname != "", prefname,overlapping)
mismatch_logchange <- data.frame(sapply(res_mismatch_pnas, function(x) x$table$logFC),
row.names = rownames(res_mismatch_pnas$KFF_ackA_vs_ctrl$table),
genenames = prefname)
mismatch_pvals <- data.frame(sapply(res_mismatch_pnas, function(x) x$table$FDR),
row.names = rownames(res_mismatch_pnas$KFF_ackA_vs_ctrl$table),
genenames = prefname)
mismatch_logchange <- mismatch_logchange[order(mismatch_pvals$KFF_ackA_vs_ctrl),]
mismatch_pvals <- mismatch_pvals[order(mismatch_pvals$KFF_ackA_vs_ctrl),]
topdegenes <- c()
for (i in names(mismatch_logchange[-6])) {
degenes <- mismatch_pvals[rownames(mismatch_logchange)[abs(mismatch_logchange[[i]])>1 & mismatch_pvals[[i]] < 0.001],]
degenes <- rownames(degenes[order(degenes[[i]]),])
topdegenes <- unique(append(topdegenes, degenes[1:20]))
}
topdegenes <- topdegenes[!is.na(topdegenes)]
topdegenes <- c("ackA", "ddlB", "ompC", "ybeX", "ybjZ", "aegA", "hslR")
mismatch_logchange <- mismatch_logchange[mismatch_logchange$genenames %in% topdegenes,]
mismatch_pvals <- mismatch_pvals[mismatch_pvals$genenames %in% topdegenes,]
rownames(mismatch_logchange) <- ifelse(mismatch_logchange$genenames == "", rownames(mismatch_logchange),
mismatch_logchange$genenames)
rownames(mismatch_pvals) <- rownames(mismatch_logchange)
mismatch_logchange <- mismatch_logchange[order(mismatch_logchange$KFF_ackA_vs_ctrl, decreasing = T),][-6]
mismatch_pvals <- mismatch_pvals[rownames(mismatch_logchange),][-6]
diff_exp <- sapply(names(mismatch_pvals[-6]), function(x) {
tf <- mismatch_pvals[[x]] < 0.001 & abs(mismatch_logchange[[x]])>1
ifelse(tf, "*", " ")
})
colnames(mismatch_logchange) <- gsub("_vs_ctrl", "", colnames(mismatch_logchange))
colnames(mismatch_logchange) <- gsub("KFF_", "", colnames(mismatch_logchange))
c1 =  circlize::colorRamp2(c(-3, 0, 3), c("blue", "white", "red"))
ht4 <- Heatmap(mismatch_logchange, name = "Log2 FC",
col = c1,
cluster_rows = F, cluster_columns = F, show_heatmap_legend = F,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1s", diff_exp[i, j]), x, y)
},
border = TRUE,
height = unit(10, "cm"), width = unit(10, "cm"),
#row_names_max_width = max_text_width(c(0,0),gp = gpar(fontsize = 0)),
column_names_rot = 45)
lgd2 = Legend(col_fun = c1, title = expression("Log"[2]*" FC"), labels_gp = gpar(fontsize = 10),
title_gp = gpar(fontsize = 15),grid_width =  unit(0.8, "cm"),
at = c(-2, 0, 2), legend_width = unit(2, "cm"),
labels = c("-3", "  0", "  3"), legend_height = unit(3, "cm"),
title_position = "leftcenter-rot")
svg("../analysis/heatmap_noness.svg", height = 15, width = 15)
print(ht4)
draw(lgd2, x = unit(8, "cm"), y = unit(19, "cm"), just = c("left", "bottom"))
dev.off()
l <- length(colnames(con_mismatch_pnas))
list_kegg_fry <- lapply(1:l, function(x) fry(y,idx_kegg, design, con_mismatch_pnas[,x]))
names(list_kegg_fry) <- colnames(con_mismatch_pnas)
list_kegg_fry$KFF_rpl32_vs_ctrl <- NULL  #remove rpl32
res_mismatch_pnas$KFF_rpl32_vs_ctrl <- NULL
for (fryres in names(list_kegg_fry)) {
list_kegg_fry[[fryres]][["TERM"]] <- ifelse(grepl("path",rownames(list_kegg_fry[[fryres]])),
list_kegg[rownames(list_kegg_fry[[fryres]])],
rownames(list_kegg_fry[[fryres]]))
list_kegg_fry[[fryres]][["TERM"]] <- gsub("(.*) - Salmonella enterica subsp. enterica serovar Typhimurium SL1344",
"\\1", list_kegg_fry[[fryres]][["TERM"]])
write.csv(list_kegg_fry[[fryres]], paste("../analysis/pathway_analysis/", fryres, ".csv", sep = ""))
}
kegg_frysig <- lapply(list_kegg_fry, function(x) x[x[["FDR"]]<0.001 & x[["NGenes"]]>10,])
for (i in names(kegg_frysig)) {
print(i)
print(dim(kegg_frysig[[i]]))
print(kegg_frysig[[i]][,c(1,2,4,7)])
kegg_siggos <- c(kegg_siggos, rownames(kegg_frysig[[i]][1:10,]))  # can be modified
}
kegg_siggos <- unique(kegg_siggos[!grepl("NA", kegg_siggos)])
idx_kegg_char <- lapply(idx_kegg, as.character)
# I create a dataframe with mean logFC values for each significant GO-term:
mm_hm_kegg <- t(as.data.frame(lapply(idx_kegg_char[kegg_siggos], function(x){
sapply(names(res_mismatch_pnas), function(y){
mean(res_mismatch_pnas[[y]]$table[x,]$logFC)
})
})))
acpp_hm_kegg <- t(as.data.frame(lapply(idx_kegg_char[kegg_siggos], function(x){
sapply(names(res_acpP_mutants), function(y){
mean(res_acpP_mutants[[y]]$table[x,]$logFC[!is.na(res_acpP_mutants[[y]]$table[x,]$logFC)])
})
})))
colnames(acpp_hm_kegg) <- gsub("(.*)_vs_ctrl", "\\1", colnames(acpp_hm_kegg))
colnames(mm_hm_kegg) <- gsub("KFF_(.*)_vs_ctrl", "\\1", colnames(mm_hm_kegg))
acpp_hm_kegg <- as.data.frame(acpp_hm_kegg)
mm_hm_kegg <- as.data.frame(mm_hm_kegg)
rownames(mm_hm_kegg) <- gsub("\\.", "\\:", rownames(mm_hm_kegg))
rownames(acpp_hm_kegg) <- gsub("\\.", "\\:", rownames(acpp_hm_kegg))
mm_hm_kegg <- mm_hm_kegg[order(mm_hm_kegg[,1], decreasing = T),]
acpp_hm_kegg <- acpp_hm_kegg[rownames(mm_hm_kegg),]
logchange_kegg <- cbind(acpp_hm_kegg, mm_hm_kegg)
kegg_sizes <- sapply(idx_kegg_char[rownames(logchange_kegg)], function(x) length(x))
mm_pvals <- data.frame(sapply(names(list_kegg_fry), function(x) list_kegg_fry[[x]][rownames(mm_hm_kegg),"FDR"]),
row.names = rownames(mm_hm_kegg))
acpp_pvals <-data.frame(sapply(names(acpp_kegg_fry), function(x) acpp_kegg_fry[[x]][rownames(acpp_hm_kegg),"FDR"]),
row.names = rownames(acpp_hm_kegg))
pvals_kegg <- cbind(acpp_pvals, mm_pvals)
#select only significant ones:
pvals_kegg <-sapply(pvals_kegg, function(x) ifelse(x<0.001, x <- "*", x<-"") )
keggpws <- list_kegg_fry$KFF_ackA_vs_ctrl[rownames(mm_hm_kegg),] [["TERM"]]
rownames(logchange_kegg) <- ifelse(!is.na(keggpws),keggpws, rownames(logchange_kegg) )
colnames(logchange_kegg) <- gsub("acpP_PNA_mut_(\\d)", "mm\\1", colnames(logchange_kegg))
colnames(logchange_kegg) <- gsub("acpP_scrambled", "scr", colnames(logchange_kegg))
col_fun = colorRamp2(c(-2,0, 2), c("steelblue", "white", "darkorange"))
exp <- factor(c(rep("acpP", 11), rep("NE genes", 4)))
ht_vert <- Heatmap(logchange_kegg, cluster_rows = F, cluster_columns = F,
name = "GO-analysis", col = col_fun,
show_heatmap_legend = F,
row_title_side = "right", row_title_rot = 0,
border = TRUE,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1s", pvals_kegg[i, j]), x, y)
}, column_split = exp,
column_names_gp = gpar(fontsize = 8, fontface = "italic"),
row_names_gp = gpar(fontsize = 10),
row_title = NULL,
width = unit(15, "cm"), height = unit(15, "cm"),
right_annotation = rowAnnotation(genes = anno_barplot(kegg_sizes)))
ht_vert
lgd = Legend(col_fun = col_fun, title = expression("mean log"[2]*" FC"), #direction = "horizontal",
title_gp = gpar(fontsize = 12), labels = c("-2", " 0"," 2"), legend_height = unit(6, "cm"),
at = c(-2, 0, 2), border = "black",
title_position = "leftcenter-rot")
draw(lgd)
svg("../analysis/pathway_analysis/hm_KEGG.svg", width = unit(12, "cm"),  height = unit(10, "cm"))
draw(ht_vert)
draw(lgd, x = unit(2, "cm"), y = unit(10, "cm"), just = c("left", "bottom"))
dev.off()
all_res <- append(res_acpP_mutants, res_mismatch_pnas)
startot <- startot %>% filter(trans_coord %in% c(-20:3)) %>% mutate(probe_id=gsub("_rev","", probe_id)) %>%
filter(!grepl("rpl32", probe_id))
startot$logcpm <- unlist(sapply(1:dim(startot)[1], function(x){
pname <- gsub(".*\\_(acpP(_PNA_mut_\\d)?).*", "\\1", startot$probe_id[x])
pname <- gsub(".*_(KFF_.*)", "\\1", pname)
rname <- paste0(pname, "_vs_ctrl", sep="")
lt <- startot$locus_tag[x]
y <- all_res[[rname]]$table[lt,]$logCPM
ifelse(is.null(y), NA, y)
}))
startot$logfc <- unlist(sapply(1:dim(startot)[1], function(x){
pname <- gsub(".*\\_(acpP(_PNA_mut_\\d)?).*", "\\1", startot$probe_id[x])
pname <- gsub(".*_(KFF_.*)", "\\1", pname)
rname <- paste0(pname, "_vs_ctrl", sep="")
lt <- startot$locus_tag[x]
y <- all_res[[rname]]$table[lt,]$logFC
ifelse(is.null(y), NA, y)
}))
startot$minlog10FDR <- unlist(sapply(1:dim(startot)[1], function(x){
pname <- gsub(".*\\_(acpP(_PNA_mut_\\d)?).*", "\\1", startot$probe_id[x])
pname <- gsub(".*_(KFF_.*)", "\\1", pname)
rname <- paste0(pname, "_vs_ctrl", sep="")
lt <- startot$locus_tag[x]
y <- -log10(all_res[[rname]]$table[lt,]$FDR)
ifelse(is.null(y), NA, y)
}))
# add RNAseE cleavage sites for salmonella:
rnaseE <- read.delim("../data/paper_suppmat/rnasse_e_1-s2.0-S1097276516307109-mmc2.csv", header = T)
startot$RNAseE_sites <- unlist(sapply(1:dim(startot)[1], function(x){
gname <- startot$gene_name[x]
lt <- paste0(startot$locus_tag[x], ";", sep="")
sum(grepl(gname, rnaseE$Gene) | grepl(lt, rnaseE$Gene))
}))
